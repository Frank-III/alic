// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.5.1.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These functions are ignored because they are not marked as `pub`: `compress_image`, `convert_image_type`, `create_csparameters`, `get_out_path`, `guess_image_type`, `read_image`, `remove_extension`
// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `assert_receiver_is_total_eq`, `clone`, `eq`, `fmt`

Future<CompressResult> processImg({required Parameters parameters}) =>
    RustLib.instance.api.crateApiCompressorProcessImg(parameters: parameters);

class CompressResult {
  final String path;
  final String outPath;
  final String result;

  const CompressResult({
    required this.path,
    required this.outPath,
    required this.result,
  });

  @override
  int get hashCode => path.hashCode ^ outPath.hashCode ^ result.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is CompressResult &&
          runtimeType == other.runtimeType &&
          path == other.path &&
          outPath == other.outPath &&
          result == other.result;
}

enum ImageType {
  jpeg,
  png,
  webp,
  gif,
  tiff,
  ;
}

class Parameters {
  final String postfix;
  final String path;
  final int jpegQuality;
  final int pngQuality;
  final int webpQuality;
  final int gifQuality;
  final bool resize;
  final int resizeWidth;
  final int resizeHeight;
  final ImageType? convertExtension;

  const Parameters({
    required this.postfix,
    required this.path,
    required this.jpegQuality,
    required this.pngQuality,
    required this.webpQuality,
    required this.gifQuality,
    required this.resize,
    required this.resizeWidth,
    required this.resizeHeight,
    this.convertExtension,
  });

  @override
  int get hashCode =>
      postfix.hashCode ^
      path.hashCode ^
      jpegQuality.hashCode ^
      pngQuality.hashCode ^
      webpQuality.hashCode ^
      gifQuality.hashCode ^
      resize.hashCode ^
      resizeWidth.hashCode ^
      resizeHeight.hashCode ^
      convertExtension.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is Parameters &&
          runtimeType == other.runtimeType &&
          postfix == other.postfix &&
          path == other.path &&
          jpegQuality == other.jpegQuality &&
          pngQuality == other.pngQuality &&
          webpQuality == other.webpQuality &&
          gifQuality == other.gifQuality &&
          resize == other.resize &&
          resizeWidth == other.resizeWidth &&
          resizeHeight == other.resizeHeight &&
          convertExtension == other.convertExtension;
}
